import pickle, os
import pandas as pd
from collections import defaultdict

'''
This file provides functions to draw/check previous results.
find: It loads records in data/records.db, then filters it by args.
draw: It draws data of one experiment to given axis.
      When times it true, it draws data verses time, otherwise verses epoch.
      Arg path follows this structure:
         / - valid - aro - rmse
                         - mcorr
                   - val - rmse
                         - mcorr
                   - gnr - loss
           - train -> same
           - test  -> same
      The entries under aro and val is dynamically changed according to testers.
show: It prints all the experiments in data (generated by find).
      If by is set, it sorts the experiments.
'''

keys = ['continuous', 'batchsize', 'resolution', 'epochs', 'spec', 'model',
        'phase', 'size', 'lr', 'weight_decay', 'time', 'params']


def find(model=None, continuous=None, batchsize=None, resolution=None,
         spec=None, phase=None, epochs=None, size=None, lr=None, weight_decay=None):
    ret = []

    if not os.path.exists('data/records.db'):
        return []

    with open('data/records.db', 'rb') as f:
        data = pickle.load(f)

    for i in data:
        acceptable = True
        for j in keys[:-2]:
            if locals()[j] is not None:
                if i['args'][j] != locals()[j]:
                    acceptable = False
                    break
        if acceptable:
            ret.append(i)
    return ret


def draw(ax, data, path, time=False, **kwargs):
    d = data
    if 'label' in kwargs:
        l = kwargs['label']
        if not isinstance(l, str):
            kwargs['label'] = l(data)
    for i in path:
        d = d[i]
    if time:
        t = [i.seconds / 60 for i in data['time']]
        ax.plot(t, d, **kwargs)
    else:
        ax.plot(d, **kwargs)


def show(data, by=None):
    def recurse(o, p):
        if isinstance(o, dict):
            for k, v in o.items():
                recurse(v, '{}{}-'.format(p, k))
        else:
            tmp[p[:-1]].append(o[0])

    tmp = defaultdict(list)
    for i, d in enumerate(data):
        for j in keys:
            tmp[j].append(d['args'][j])
        recurse(d['test'], '')
        for _, v in tmp.items():
            if len(v) < i + 1:
                v.append('N/A')

    df = pd.DataFrame(tmp)
    if by is not None:
        df = df.sort_values(by=by)
    print(df.to_string())
